apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name | quote }}
  namespace: {{ .Values.namespace | quote }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.name | quote }}
      name: {{ .Values.name | quote }}
      dbtype: {{ .Values.db_type | quote }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.name | quote }}
        name: {{ .Values.name | quote }}
        dbtype: {{ .Values.db_type | quote }}
    spec:
      containers:
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: DB_TYPE
          value: {{ .Values.db_type | quote }}
        image: {{ .Values.image_url | quote }}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: {{ .Values.memory_limit | quote }}
          requests:
            memory: {{ .Values.memory_limit | quote }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: py-helloworld
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
